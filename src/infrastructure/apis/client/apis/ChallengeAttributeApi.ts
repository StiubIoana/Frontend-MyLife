/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChallengeAttributeAddDTO,
  ChallengeAttributeDTOPagedResponseRequestResponse,
  ChallengeAttributeDTORequestResponse,
  ChallengeAttributeUpdateDTO,
  Int32RequestResponse,
  RequestResponse,
} from '../models';
import {
    ChallengeAttributeAddDTOFromJSON,
    ChallengeAttributeAddDTOToJSON,
    ChallengeAttributeDTOPagedResponseRequestResponseFromJSON,
    ChallengeAttributeDTOPagedResponseRequestResponseToJSON,
    ChallengeAttributeDTORequestResponseFromJSON,
    ChallengeAttributeDTORequestResponseToJSON,
    ChallengeAttributeUpdateDTOFromJSON,
    ChallengeAttributeUpdateDTOToJSON,
    Int32RequestResponseFromJSON,
    Int32RequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiChallengeAttributeAddPostRequest {
    challengeAttributeAddDTO?: ChallengeAttributeAddDTO;
}

export interface ApiChallengeAttributeDeleteByNameNameDeleteRequest {
    name: string;
}

export interface ApiChallengeAttributeDeleteIdDeleteRequest {
    id: string;
}

export interface ApiChallengeAttributeGetAllChalengeAttributesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiChallengeAttributeGetByIdIdGetRequest {
    id: string;
}

export interface ApiChallengeAttributeGetByNameNameGetRequest {
    name: string;
}

export interface ApiChallengeAttributeGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiChallengeAttributeUpdatePutRequest {
    challengeAttributeUpdateDTO?: ChallengeAttributeUpdateDTO;
}

/**
 * 
 */
export class ChallengeAttributeApi extends runtime.BaseAPI {

    /**
     */
    async apiChallengeAttributeAddPostRaw(requestParameters: ApiChallengeAttributeAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChallengeAttributeAddDTOToJSON(requestParameters.challengeAttributeAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeAddPost(requestParameters: ApiChallengeAttributeAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeAttributeAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAttributeDeleteByNameNameDeleteRaw(requestParameters: ApiChallengeAttributeDeleteByNameNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling apiChallengeAttributeDeleteByNameNameDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/DeleteByName/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeDeleteByNameNameDelete(requestParameters: ApiChallengeAttributeDeleteByNameNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeAttributeDeleteByNameNameDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAttributeDeleteIdDeleteRaw(requestParameters: ApiChallengeAttributeDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiChallengeAttributeDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeDeleteIdDelete(requestParameters: ApiChallengeAttributeDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeAttributeDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAttributeGetAllChalengeAttributesGetRaw(requestParameters: ApiChallengeAttributeGetAllChalengeAttributesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeAttributeDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/GetAllChalengeAttributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeAttributeDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeGetAllChalengeAttributesGet(requestParameters: ApiChallengeAttributeGetAllChalengeAttributesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeAttributeDTOPagedResponseRequestResponse> {
        const response = await this.apiChallengeAttributeGetAllChalengeAttributesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAttributeGetByIdIdGetRaw(requestParameters: ApiChallengeAttributeGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeAttributeDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiChallengeAttributeGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeAttributeDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeGetByIdIdGet(requestParameters: ApiChallengeAttributeGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeAttributeDTORequestResponse> {
        const response = await this.apiChallengeAttributeGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAttributeGetByNameNameGetRaw(requestParameters: ApiChallengeAttributeGetByNameNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeAttributeDTORequestResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling apiChallengeAttributeGetByNameNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/GetByName/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeAttributeDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeGetByNameNameGet(requestParameters: ApiChallengeAttributeGetByNameNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeAttributeDTORequestResponse> {
        const response = await this.apiChallengeAttributeGetByNameNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAttributeGetChallengeAttributeCountGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int32RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/GetChallengeAttributeCount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeGetChallengeAttributeCountGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int32RequestResponse> {
        const response = await this.apiChallengeAttributeGetChallengeAttributeCountGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAttributeGetPageGetRaw(requestParameters: ApiChallengeAttributeGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeAttributeDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeAttributeDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeGetPageGet(requestParameters: ApiChallengeAttributeGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeAttributeDTOPagedResponseRequestResponse> {
        const response = await this.apiChallengeAttributeGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAttributeUpdatePutRaw(requestParameters: ApiChallengeAttributeUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeAttribute/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChallengeAttributeUpdateDTOToJSON(requestParameters.challengeAttributeUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAttributeUpdatePut(requestParameters: ApiChallengeAttributeUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeAttributeUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
