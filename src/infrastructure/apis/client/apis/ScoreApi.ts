/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestResponse,
  ScoreAddDTO,
  ScoreDTORequestResponse,
  ScoreUpdateDTO,
} from '../models';
import {
    RequestResponseFromJSON,
    RequestResponseToJSON,
    ScoreAddDTOFromJSON,
    ScoreAddDTOToJSON,
    ScoreDTORequestResponseFromJSON,
    ScoreDTORequestResponseToJSON,
    ScoreUpdateDTOFromJSON,
    ScoreUpdateDTOToJSON,
} from '../models';

export interface ApiScoreAddPostRequest {
    scoreAddDTO?: ScoreAddDTO;
}

export interface ApiScoreDeleteByIdIdDeleteRequest {
    id: string;
}

export interface ApiScoreDeleteUserIdAttributeIdDeleteRequest {
    userId: string;
    attributeId: string;
}

export interface ApiScoreGetByIdIdGetRequest {
    id: string;
}

export interface ApiScoreGetUserIdAttributeIdGetRequest {
    userId: string;
    attributeId: string;
}

export interface ApiScoreUpdatePutRequest {
    scoreUpdateDTO?: ScoreUpdateDTO;
}

/**
 * 
 */
export class ScoreApi extends runtime.BaseAPI {

    /**
     */
    async apiScoreAddPostRaw(requestParameters: ApiScoreAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Score/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScoreAddDTOToJSON(requestParameters.scoreAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiScoreAddPost(requestParameters: ApiScoreAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiScoreAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiScoreDeleteByIdIdDeleteRaw(requestParameters: ApiScoreDeleteByIdIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiScoreDeleteByIdIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Score/DeleteById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiScoreDeleteByIdIdDelete(requestParameters: ApiScoreDeleteByIdIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiScoreDeleteByIdIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiScoreDeleteUserIdAttributeIdDeleteRaw(requestParameters: ApiScoreDeleteUserIdAttributeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiScoreDeleteUserIdAttributeIdDelete.');
        }

        if (requestParameters.attributeId === null || requestParameters.attributeId === undefined) {
            throw new runtime.RequiredError('attributeId','Required parameter requestParameters.attributeId was null or undefined when calling apiScoreDeleteUserIdAttributeIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Score/Delete/{userId}/{attributeId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"attributeId"}}`, encodeURIComponent(String(requestParameters.attributeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiScoreDeleteUserIdAttributeIdDelete(requestParameters: ApiScoreDeleteUserIdAttributeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiScoreDeleteUserIdAttributeIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiScoreGetByIdIdGetRaw(requestParameters: ApiScoreGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScoreDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiScoreGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Score/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoreDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiScoreGetByIdIdGet(requestParameters: ApiScoreGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScoreDTORequestResponse> {
        const response = await this.apiScoreGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiScoreGetUserIdAttributeIdGetRaw(requestParameters: ApiScoreGetUserIdAttributeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScoreDTORequestResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiScoreGetUserIdAttributeIdGet.');
        }

        if (requestParameters.attributeId === null || requestParameters.attributeId === undefined) {
            throw new runtime.RequiredError('attributeId','Required parameter requestParameters.attributeId was null or undefined when calling apiScoreGetUserIdAttributeIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Score/Get/{userId}/{attributeId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"attributeId"}}`, encodeURIComponent(String(requestParameters.attributeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoreDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiScoreGetUserIdAttributeIdGet(requestParameters: ApiScoreGetUserIdAttributeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScoreDTORequestResponse> {
        const response = await this.apiScoreGetUserIdAttributeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiScoreUpdatePutRaw(requestParameters: ApiScoreUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Score/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ScoreUpdateDTOToJSON(requestParameters.scoreUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiScoreUpdatePut(requestParameters: ApiScoreUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiScoreUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
