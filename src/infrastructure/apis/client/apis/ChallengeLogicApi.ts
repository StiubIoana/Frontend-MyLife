/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChallengeAttributeWithScoresDTOPagedResponseRequestResponse,
  RequestResponse,
  ScoreWithAttributeDTOPagedResponseRequestResponse,
} from '../models';
import {
    ChallengeAttributeWithScoresDTOPagedResponseRequestResponseFromJSON,
    ChallengeAttributeWithScoresDTOPagedResponseRequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
    ScoreWithAttributeDTOPagedResponseRequestResponseFromJSON,
    ScoreWithAttributeDTOPagedResponseRequestResponseToJSON,
} from '../models';

export interface ApiChallengeLogicCompleteChallengeDeleteRequest {
    body?: string;
}

export interface ApiChallengeLogicGetAllAttributeScoresGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiChallengeLogicGetScoresForCurrentUserGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiChallengeLogicJoinChallengePostRequest {
    body?: string;
}

export interface ApiChallengeLogicQuitChallengeDeleteRequest {
    body?: string;
}

/**
 * 
 */
export class ChallengeLogicApi extends runtime.BaseAPI {

    /**
     */
    async apiChallengeLogicCompleteChallengeDeleteRaw(requestParameters: ApiChallengeLogicCompleteChallengeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeLogic/CompleteChallenge`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeLogicCompleteChallengeDelete(requestParameters: ApiChallengeLogicCompleteChallengeDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeLogicCompleteChallengeDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeLogicGetAllAttributeScoresGetRaw(requestParameters: ApiChallengeLogicGetAllAttributeScoresGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeAttributeWithScoresDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeLogic/GetAllAttributeScores`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeAttributeWithScoresDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeLogicGetAllAttributeScoresGet(requestParameters: ApiChallengeLogicGetAllAttributeScoresGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeAttributeWithScoresDTOPagedResponseRequestResponse> {
        const response = await this.apiChallengeLogicGetAllAttributeScoresGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeLogicGetScoresForCurrentUserGetRaw(requestParameters: ApiChallengeLogicGetScoresForCurrentUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScoreWithAttributeDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeLogic/GetScoresForCurrentUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoreWithAttributeDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeLogicGetScoresForCurrentUserGet(requestParameters: ApiChallengeLogicGetScoresForCurrentUserGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScoreWithAttributeDTOPagedResponseRequestResponse> {
        const response = await this.apiChallengeLogicGetScoresForCurrentUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeLogicJoinChallengePostRaw(requestParameters: ApiChallengeLogicJoinChallengePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeLogic/JoinChallenge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeLogicJoinChallengePost(requestParameters: ApiChallengeLogicJoinChallengePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeLogicJoinChallengePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeLogicQuitChallengeDeleteRaw(requestParameters: ApiChallengeLogicQuitChallengeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ChallengeLogic/QuitChallenge`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeLogicQuitChallengeDelete(requestParameters: ApiChallengeLogicQuitChallengeDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeLogicQuitChallengeDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
