/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChallengeAddDTO,
  ChallengeDTOPagedResponseRequestResponse,
  ChallengeDTORequestResponse,
  ChallengeUpdateDTO,
  ChallengeWithAttributesAddDTO,
  ChallengeWithAttributesDTOPagedResponseRequestResponse,
  ChallengeWithAttributesDTORequestResponse,
  Int32RequestResponse,
  RequestResponse,
} from '../models';
import {
    ChallengeAddDTOFromJSON,
    ChallengeAddDTOToJSON,
    ChallengeDTOPagedResponseRequestResponseFromJSON,
    ChallengeDTOPagedResponseRequestResponseToJSON,
    ChallengeDTORequestResponseFromJSON,
    ChallengeDTORequestResponseToJSON,
    ChallengeUpdateDTOFromJSON,
    ChallengeUpdateDTOToJSON,
    ChallengeWithAttributesAddDTOFromJSON,
    ChallengeWithAttributesAddDTOToJSON,
    ChallengeWithAttributesDTOPagedResponseRequestResponseFromJSON,
    ChallengeWithAttributesDTOPagedResponseRequestResponseToJSON,
    ChallengeWithAttributesDTORequestResponseFromJSON,
    ChallengeWithAttributesDTORequestResponseToJSON,
    Int32RequestResponseFromJSON,
    Int32RequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiChallengeAddChallengeWithAttributesPostRequest {
    challengeWithAttributesAddDTO?: ChallengeWithAttributesAddDTO;
}

export interface ApiChallengeAddPostRequest {
    challengeAddDTO?: ChallengeAddDTO;
}

export interface ApiChallengeDeleteIdDeleteRequest {
    id: string;
}

export interface ApiChallengeGetAllChallengesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiChallengeGetAllChallengesWithAttributesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiChallengeGetByIdIdGetRequest {
    id: string;
}

export interface ApiChallengeGetChallengeWithAttributesIdGetRequest {
    id: string;
}

export interface ApiChallengeGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiChallengeUpdatePutRequest {
    challengeUpdateDTO?: ChallengeUpdateDTO;
}

/**
 * 
 */
export class ChallengeApi extends runtime.BaseAPI {

    /**
     */
    async apiChallengeAddChallengeWithAttributesPostRaw(requestParameters: ApiChallengeAddChallengeWithAttributesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/AddChallengeWithAttributes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChallengeWithAttributesAddDTOToJSON(requestParameters.challengeWithAttributesAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAddChallengeWithAttributesPost(requestParameters: ApiChallengeAddChallengeWithAttributesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeAddChallengeWithAttributesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeAddPostRaw(requestParameters: ApiChallengeAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChallengeAddDTOToJSON(requestParameters.challengeAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeAddPost(requestParameters: ApiChallengeAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeDeleteIdDeleteRaw(requestParameters: ApiChallengeDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiChallengeDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeDeleteIdDelete(requestParameters: ApiChallengeDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeGetAllChallengesGetRaw(requestParameters: ApiChallengeGetAllChallengesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/GetAllChallenges`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeGetAllChallengesGet(requestParameters: ApiChallengeGetAllChallengesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeDTOPagedResponseRequestResponse> {
        const response = await this.apiChallengeGetAllChallengesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeGetAllChallengesWithAttributesGetRaw(requestParameters: ApiChallengeGetAllChallengesWithAttributesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeWithAttributesDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/GetAllChallengesWithAttributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeWithAttributesDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeGetAllChallengesWithAttributesGet(requestParameters: ApiChallengeGetAllChallengesWithAttributesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeWithAttributesDTOPagedResponseRequestResponse> {
        const response = await this.apiChallengeGetAllChallengesWithAttributesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeGetByIdIdGetRaw(requestParameters: ApiChallengeGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiChallengeGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeGetByIdIdGet(requestParameters: ApiChallengeGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeDTORequestResponse> {
        const response = await this.apiChallengeGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeGetChallengeCountGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int32RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/GetChallengeCount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeGetChallengeCountGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int32RequestResponse> {
        const response = await this.apiChallengeGetChallengeCountGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeGetChallengeWithAttributesIdGetRaw(requestParameters: ApiChallengeGetChallengeWithAttributesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeWithAttributesDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiChallengeGetChallengeWithAttributesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/GetChallengeWithAttributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeWithAttributesDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeGetChallengeWithAttributesIdGet(requestParameters: ApiChallengeGetChallengeWithAttributesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeWithAttributesDTORequestResponse> {
        const response = await this.apiChallengeGetChallengeWithAttributesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeGetPageGetRaw(requestParameters: ApiChallengeGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChallengeWithAttributesDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeWithAttributesDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeGetPageGet(requestParameters: ApiChallengeGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChallengeWithAttributesDTOPagedResponseRequestResponse> {
        const response = await this.apiChallengeGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChallengeUpdatePutRaw(requestParameters: ApiChallengeUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Challenge/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChallengeUpdateDTOToJSON(requestParameters.challengeUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiChallengeUpdatePut(requestParameters: ApiChallengeUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiChallengeUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
